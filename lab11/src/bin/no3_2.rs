fn decoder(b: u8) -> u8 {
    match b {
        0x0 => 0x0,
        0x1 => 0x1,
        0x3 => 0x2,
        0x2 => 0x3,
        0x6 => 0x4,
        0x7 => 0x5,
        0x5 => 0x6,
        0x4 => 0x7,
        0xC => 0x8,
        0xD => 0x9,
        0xF => 0xA,
        0xE => 0xB,
        0xA => 0xC,
        0xB => 0xD,
        0x9 => 0xE,
        0x8 => 0xF,
        _ => 0x0,
    }
}

fn decode_hex(byte: u8) -> u8 {
    let high_nibble = decoder(byte >> 4);
    let low_nibble = decoder(byte & 0x0F);
    (high_nibble << 4) | low_nibble
}

fn decode_hex_data(v: &[u8]) -> Vec<u8> {
    let mut decoded_data = Vec::new();

    for &byte in v {
        decoded_data.push(decode_hex(byte));
    }

    decoded_data
}

fn main() {
    let encoded_byte: u8 = 0x76;
    let decoded_byte = decode_hex(encoded_byte);
    println!("{:02X}", decoded_byte); // Output should be "54"
}

#[test]
fn test_decode_hex() {
    const FOX: &str = "The quick brown fox jumps over the lazy dog.";
    const ENCODED_DATA: &[u8] = &[
    0x76, 0x5C, 0x57, 0x30, 0x41, 0x47, 0x5D, 0x52,
    0x5E, 0x30, 0x53, 0x43, 0x58, 0x44, 0x59, 0x30,
    0x55, 0x58, 0x4C, 0x30, 0x5F, 0x47, 0x5B, 0x40,
    0x42, 0x30, 0x58, 0x45, 0x57, 0x43, 0x30, 0x46,
    0x5C, 0x57, 0x30, 0x5A, 0x51, 0x4F, 0x4D, 0x30,
    0x56, 0x58, 0x54, 0x39
    ];

    assert_eq!(
    (0..16).map(decode_hex).collect::<Vec<_>>(),
    [ 0x0, 0x1, 0x3, 0x2, 0x7, 0x6, 0x4, 0x5,
    0xF, 0xE, 0xC, 0xD, 0x8, 0x9, 0xB, 0xA ]);

    assert_eq!(decode_hex(0x76), 0x54);
    assert_eq!(decode_hex(0x5C), 0x68);
    
    let original_data = FOX.as_bytes();
    let encoded_data = ENCODED_DATA;
    assert_eq!(decode_hex_data(encoded_data), original_data);
}